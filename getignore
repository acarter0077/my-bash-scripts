#!/usr/bin/env python3
"""getignore

Download gitignore files from https://github.com/github/gitignore.
"""

import os
import re
import sys
from argparse import ArgumentParser
from base64 import b64decode
from difflib import Differ, get_close_matches
from functools import reduce
from typing import Iterable

import requests


def unique_lines(text):
    unique_lines = []
    for line in text.splitlines(keepends=True):
        if line not in unique_lines or line.isspace():
            unique_lines.append(line)
    return "".join(unique_lines)


def merge(a, b):
    a = a.splitlines(keepends=True)
    b = b.splitlines(keepends=True)
    differ = Differ()
    result = "".join(differ.compare(a, b))
    result = re.sub(r"^[+\- ] ", "", result, flags=re.MULTILINE)
    result = re.sub(r"^\?.*\n?", "", result, flags=re.MULTILINE)
    return result


def get_urls(session=None):
    tree_url = (
        "https://api.github.com/repos/github/gitignore/git/trees/main?recursive=1"
    )
    res = session.get(tree_url) if session else requests.get(tree_url)
    res.raise_for_status()
    tree = res.json()["tree"]

    url_map = {
        os.path.splitext(os.path.basename(i["path"]))[0]: i["url"]
        for i in tree
        if i["path"].endswith(".gitignore")
    }
    url_map = dict(sorted(url_map.items(), key=lambda i: i[0].lower()))
    return url_map


def list_files(pad=2):
    """List all availabile gitignore files in the tree"""
    keys = list(get_urls().keys())
    keys_len = len(keys)

    max_len = max([len(key) for key in keys])

    cols = os.get_terminal_size()[0] // (max_len + pad)
    rows = keys_len // cols if (keys_len % cols == 0) else (keys_len // cols) + 1
    for row in range(rows):
        for i in range(row, keys_len, rows):
            if i + rows < keys_len:
                print(keys[i].ljust(max_len + pad), end="")
            else:
                print(keys[i])


class GitignoreNotFoundError(Exception):
    pass


def get_files(match_strs: Iterable[str]) -> list[str]:
    gitignores = []
    with requests.Session() as sess:
        file_tree = get_urls(session=sess)
        for match_str in match_strs:
            try:
                file_url = file_tree[match_str]
            except KeyError:
                error_message = f"No results found for '{match_str}'.\n"
                similar_results = get_close_matches(match_str, file_tree.keys())

                if len(similar_results):
                    error_message += "Did you mean...\n\n" + "\n".join(similar_results)

                raise GitignoreNotFoundError(error_message)

            res = sess.get(file_url)
            res.raise_for_status()
            file_b64 = res.json()["content"]
            file_contents = str(b64decode(file_b64), encoding="utf-8")
            gitignores.append(file_contents)

    return gitignores


def main():
    parser = ArgumentParser(
        description="Get .gitignore files from https://github.com/github/gitignore."
    )
    parser.add_argument(
        "-l", "--list", action="store_true", help="list all available gitignore files"
    )
    parser.add_argument(
        "-m",
        "--merge",
        action="store_true",
        help="merge multiple gitignore files rather than concatenating them",
    )
    parser.add_argument(
        "-k",
        "--keep-dups",
        action="store_true",
        help="don't remove duplicate patterns",
    )
    parser.add_argument("files", nargs="*")
    args = parser.parse_args()

    if args.list:
        list_files()
        sys.exit()

    try:
        gitignores = get_files(args.files)
    except Exception as exception:
        print(exception, file=sys.stderr)
        sys.exit(1)

    result = reduce(merge, gitignores) if args.merge else "\n".join(gitignores)

    if not args.keep_duplicates:
        result = unique_lines(result)

    print(result, end="")


if __name__ == "__main__":
    main()
